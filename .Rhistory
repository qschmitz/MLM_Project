View(Chemo)
View(chemo)
# Overview data -----------------------------------------------------------
#What are we dealing with
Chemo = read.table(file="Chemotherapy-version1.csv",header=TRUE,sep=",")
chemo = Chemo#I'll need this as I will transform somehow Chemo
head(Chemo);#View(Chemo);
#data size :  137x5
#We have 19 patients from A to S
#month are numeroted only for treatments line and reset to 0 after each treatment
#we do not have the same number of treatment per patient nor same number of month per treatment:
# patient D: only 1 line of 1 month (change of patient after that->death)
# patient E, line 2: lasted only 2 month (then start line 3->chimio side effects (anemia, vomit, etc.) intolerable)
#data is therefore unbalanced (->anova type III != type II)
attach(Chemo)
# Studying variables -------------------------------------------------------
#check data type
sapply(Chemo, class)#line should be factor
Chemo[,"line"] <- as.factor(Chemo[,"line"]);
chemo[,"line"] <- as.factor(chemo[,"line"]);
#also month?->ofc not
# Chemo[,"month"] <- as.factor(Chemo[,"month"])
# Overview tumour/sensitivity -------------------------------------------------------------------
#I want to see the evolution of the tumour through time:
#month should be re-indexed and restart to 0 for each new patient
for (i in 1:19){
chemo[patient==LETTERS[i],"month"]=seq(1,length(chemo[patient==LETTERS[i],"month"]))
}
#we can plot the tumour growth
plot(chemo[patient==LETTERS[1],"month"],chemo[patient==LETTERS[1],"tumour"],
type="l",main="Tumour growth through time",
xlab = "Time in months",ylab = "Tumour evolution",
xlim=c(1,14),ylim=c(-3,1))
for (i in 2:19){
lines(chemo[patient==LETTERS[i],"month"],chemo[patient==LETTERS[i],"tumour"],type="l",col=rand_color(1))
}
#and display the mean for the sake of clarity
moyenne=rep(0,14)
for (i in 1:19){
for (j in chemo[patient==LETTERS[i],"month"]){
moyenne[j]=moyenne[j]+chemo[patient==LETTERS[i],"tumour"][j]/19
}
}
lines(seq(14),moyenne,type="l",col="red",lwd=5)
#let's add the 95% CI for this line
#unknown variance-> Student
#unbalanced data-> df changes over time
df=rep(0,14)
for (i in 1:19){
for (j in chemo[patient==LETTERS[i],"month"]){
df[j]=df[j]+1
}
}
Up_moyenne=moyenne+qt(0.975,df-1)*sqrt(variance)/sqrt(19)
Lo_moyenne=moyenne+qt(0.025,df-1)*sqrt(variance)/sqrt(19)
lines(seq(14),Up_moyenne,type="l",col="coral",lwd=2)
lines(seq(14),Lo_moyenne,type="l",col="coral",lwd=2)
legend(12,-1,legend=c("Mean","95% CI"),col=c("red","coral"),fill=c("red","coral"))
# Conclusions based on graph:
# Drug treatments have a smaller effect through time
# we cannot conclude the effect of a change of drug from this graph as it appears at different point of time depending of the patient
# #J-S mean
# #first, we need its variance
# variance=rep(0,14)
# for (i in 1:19){
#   for (j in chemo[patient==LETTERS[i],"month"]){
#     variance[j]=variance[j]+(chemo[patient==LETTERS[i],"tumour"][j]-moyenne[j])^2/19
#   }
# }
# #then we compute it
# moyenne_JS=rep(0,14)
# for (i in 1:19){
#   for (j in chemo[patient==LETTERS[i],"month"]){
#     #I directly sum the p_i_JS and take their mean
#     moyenne_JS[j]=moyenne_JS[j]+ (moyenne[j] + (1-16*(moyenne[j]*(1-moyenne[j])/19)/variance[j])*(chemo[patient==LETTERS[i],"tumour"][j]-moyenne[j]))/19
#   }
# }
# lines(seq(14),moyenne_JS,type="l",col="blue",lwd=5)
# text(5,-1.5,labels="James Stein Mean",col="blue")
#Now the same with the evolution of sensitivity
plot(chemo[patient==LETTERS[1],"month"],chemo[patient==LETTERS[1],"sensitivity"],
type="l",main="Sensitivity to the drug combination of interest",
xlab = "Time in months",ylab = "Sensitivity",
xlim=c(0,14),ylim =c(-0.1,1))
for (i in 2:19){
lines(chemo[patient==LETTERS[i],"month"],chemo[patient==LETTERS[i],"sensitivity"],type="l",col=rand_color(1))
}
#and display the mean for the sake of clarity
moyenne_sens=rep(0,14)
for (i in 1:19){
for (j in chemo[patient==LETTERS[i],"month"]){
moyenne_sens[j]=moyenne_sens[j]+chemo[patient==LETTERS[i],"sensitivity"][j]/19
}
}
lines(seq(14),moyenne_sens,type="l",col="red",lwd=5)
#95% CI
#df has been calculated in the previous graph
Up_moyenne_sens=moyenne_sens+qt(0.975,df-1)*sqrt(variance_sens)/sqrt(19)
Lo_moyenne_sens=moyenne_sens+qt(0.025,df-1)*sqrt(variance_sens)/sqrt(19)
lines(seq(14),Up_moyenne_sens,type="l",col="coral",lwd=2)
lines(seq(14),Lo_moyenne_sens,type="l",col="coral",lwd=2)
legend(12,1,legend=c("Mean","95% CI"),col=c("red","coral"),fill=c("red","coral"))
#Conclusions:
#Overall sensitivity is significantly reducing through time.
# #J-S mean #acts weird, I surely made a mistake
# #first, we need its variance
# variance_sens=rep(0,14)
# for (i in 1:19){
#   for (j in chemo[patient==LETTERS[i],"month"]){
#     variance_sens[j]=variance_sens[j]+(chemo[patient==LETTERS[i],"sensitivity"][j]-moyenne_sens[j])^2/19
#   }
# }
# #then we compute it
# moyenne_JS_sens=rep(0,14)
# for (i in 1:19){
#   for (j in chemo[patient==LETTERS[i],"month"]){
#     #I directly sum the p_i_JS and take their mean
#     moyenne_JS_sens[j]=moyenne_JS_sens[j]+ (moyenne_sens[j] + (1-16*(moyenne_sens[j]*(1-moyenne_sens[j])/19)/variance_sens[j])*(chemo[patient==LETTERS[i],"sensitivity"][j]-moyenne_sens[j]))/19
#   }
# }
# lines(seq(14),moyenne_JS_sens,type="l",col="blue",lwd=5)
# text(1.5,0.25,labels="James Stein Mean",col="blue")
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month)#left-skewed distribution per month, the third month shows the smallest decline in tumour regression
boxplot(tumour~month,data = chemo)
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
boxplot(tumour~line)#which is consistent with less effect of lines through time, less variance
boxplot(sensitivity~patient)#clear heteroskedasticity of sensitivity distribution through patients
boxplot(line~sensitivity)
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month)#left-skewed distribution per month, the third month shows the smallest decline in tumour regression
#study data with plots
#Boxplots: use it for heteroskedasticity, distribution
boxplot(tumour~patient)#is 19 enough to diagnose patient heteroskedasticity?
#Plot design: shows variability of your factors, i.e. heteroskedasticity
plot.design(Chemo)
plot.design(chemo)
sapply(Chemo,class)
#setting model
#with month as r.v. I get 0 variance...so it is fixed? but in Orth data, age was a r.v. ...
lmer_Chemo = lmer(tumour~line*sensitivity+month+(1|patient),data=Chemo)
lmer_Chemo = lmer(tumour~sensitivity+month+(line|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+month+(line|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+month+(1|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+(month|patient),data=chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+month+(1|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+month+(line|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+(1|patient),data=Chemo)
lmer_Chemo = lmer(tumour~line*sensitivity+(line|patient),data=Chemo)
Chemo = read.table(file="Chemotherapy-version1.csv",header=TRUE,sep=",")
attach(Chemo)
Chemo[,"line"] <- as.factor(Chemo[,"line"]);
chemo=Chemo
# – equal variance of the responses around the different factor’s levels
Chemo.gpdata = groupedData(tumour~line|patient,data=Chemo,order.groups=F,
label=list(x="Patients",y="Tumour response"),
units=list(y="(percent by weight)"))
plot(Chemo.gpdata)
plot(Chemo.gpdata,outer=~tumour*line)
plot(Chemo.gpdata,outer=~sensitivity*line)
plot(Chemo.gpdata,outer=~sensitivity*line)
# – presence or absence of interactions between the different “explanatory variables”
boxplot(tumour~patient)#is 19 enough to diagnose patient heteroskedasticity?
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month)#left-skewed distribution per month, the third month shows the smallest decline in tumour regression
# – presence or absence of interactions between the different “explanatory variables”
boxplot(tumour~patient)#is 19 enough to diagnose patient heteroskedasticity?
abline(h=mean(tumour))
abline(h=mean(tumour),col="red")
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month)#left-skewed distribution per month, the third month shows the smallest decline in tumour regression
abline(h=mean(tumour),col="red")
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month)#left-skewed distribution per month, the third month shows the smallest decline in tumour regression
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
for (i in 1:19){
chemo[patient==LETTERS[i],"month"]=seq(1,length(chemo[patient==LETTERS[i],"month"]))
}
#this next boxplot is kinda biased since some "month 3" appears befort some "month 1"
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
abline(h=mean(tumour),col="red")
par(mfrow=c(2,1))
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
par(mfrow=c(1,1))
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
# – presence or absence of interactions between the different “explanatory variables”
boxplot(tumour~patient)#is 19 enough to diagnose patient heteroskedasticity?
# – presence or absence of interactions between the different “explanatory variables”
boxplot(tumour~patient,main="Tumour responses per patient")#is 19 enough to diagnose patient heteroskedasticity?
abline(h=mean(tumour),col="red")
boxplot(tumour~month,data = chemo,main="Tumour evolution per month of treatment")#that's more accurate!
abline(h=mean(tumour),col="red")
boxplot(tumour~line)#which is consistent with less effect of lines through time, less variance
abline(h=mean(tumour),col="red")
boxplot(tumour~line,main="Tumour response per line")#which is consistent with less effect of lines through time, less variance
abline(h=mean(tumour),col="red")
boxplot(sensitivity~patient)#clear heteroskedasticity of sensitivity distribution through patients
qnorm(0.1,mean=50,sd=2.5)
qnorm(0.1)
pnorm(0.1)
source('~/.active-rstudio-document', echo=TRUE)
p_blue
data_blue_area <- data %>%
filter(xx <= T_obs)
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
#   geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
# geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.05: H0 is rejected") +
theme(title = element_text(size = 7))
p_blue
p_sc2 <- p_blue
p_blue
source('~/.active-rstudio-document', echo=TRUE)
o <- c("C11" = 200,
"C12" = 103,
"C13" = 54,
"C14" = 15,
"C21" = 82,
"C22" = 137,
"C23" = 79,
"C24" = 7)
n <- sum(o)
K <- 8
degrees=3
X2_obs <- 46
alpha <- 0.05
k_alpha <- qnorm(0.10,mean=50,sd=2.5)
p_val <- 1 - pnorm(46,mean=50,sd=2.5)
T_obs <- 46
xx <- seq(0, 20, length = 500)
yy <- dnorm(xx,mean=50,sd=2.5)
data <- tibble(xx, yy)
data_red_area <- data %>%
filter(xx >= k_alpha)
p_red <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_red_area, aes(ymin = 0, ymax = yy), fill = "red", alpha = 0.5) +
geom_line() +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
annotate("text",label="55.72",x=55.72,y=0.1,colour="blue")+
annotate("text",label="7.81",x=7.81,y=0.1,colour="red")+
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "Distribution of the test statistic and position of the observed value") +
theme(title = element_text(size = 7))
data_blue_area <- data %>%
filter(xx <= T_obs)
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
#   geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
# geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.05: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
xx <- seq(20, 60, length = 500)
yy <- dnorm(xx,mean=50,sd=2.5)
data <- tibble(xx, yy)
data_red_area <- data %>%
filter(xx >= k_alpha)
p_red <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_red_area, aes(ymin = 0, ymax = yy), fill = "red", alpha = 0.5) +
geom_line() +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
annotate("text",label="55.72",x=55.72,y=0.1,colour="blue")+
annotate("text",label="7.81",x=7.81,y=0.1,colour="red")+
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "Distribution of the test statistic and position of the observed value") +
theme(title = element_text(size = 7))
data_blue_area <- data %>%
filter(xx <= T_obs)
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
#   geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
# geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.05: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.05: H0 is rejected") +
theme(title = element_text(size = 7))
p_blue
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
#geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.05: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
#geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.10: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
xx <- seq(35, 65, length = 500)
yy <- dnorm(xx,mean=50,sd=2.5)
data <- tibble(xx, yy)
data_red_area <- data %>%
filter(xx >= k_alpha)
p_red <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_red_area, aes(ymin = 0, ymax = yy), fill = "red", alpha = 0.5) +
geom_line() +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
annotate("text",label="55.72",x=55.72,y=0.1,colour="blue")+
annotate("text",label="7.81",x=7.81,y=0.1,colour="red")+
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "Distribution of the test statistic and position of the observed value") +
theme(title = element_text(size = 7))
data_blue_area <- data %>%
filter(xx <= T_obs)
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
#geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.10: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
data_blue_area <- data %>%
filter(xx <= 46.8)
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
#geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "blue", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "red", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.10: H0 is rejected") +
theme(title = element_text(size = 7))
p_blue
p_blue <- data %>%
ggplot(aes(x = xx, y = yy)) +
geom_ribbon(data = data_blue_area, aes(ymin = 0, ymax = yy), fill = "blue", alpha = 0.5) +
geom_line() +
#geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = T_obs, linetype = "dashed", colour = "red", alpha = 0.4) +
geom_vline(xintercept = k_alpha, linetype = "dashed", colour = "blue", alpha = 0.6) +
theme_minimal() +
labs(x = "chi-squared statistic test",
y = "",
title = "p-value < 0.10: H0 is rejected") +
theme(title = element_text(size = 7))
p_sc2 <- p_red
p_blue
pnorm(46,mean=50,sd=2.5)
x <- c(49.7, 48.1, 51.7, 53.8, 51, 53.2, 52.8, 49.5, 49.2)
mean(x)
confint(x)
1-0.5/2
1-0.05/2
var(x)
qqnorm(qt(seq(0,1,10))
)
seq(0,1,10)
seq(0,1)
seq(0,1,0.01)
qt(0.5,1)
qt(0,1)
qt(0.9,1)
qqnorm(qt(seq(0,1,0.01)))
qqnorm(qt(seq(0,1,0.01),1))
qqnorm(qt(seq(0,1,0.01),df=1)
)
qqnorm(qt(seq(0,1,0.01),df=1))
qt(seq(0,1,0.01),df=1)
qqnorm(qt(seq(0.01,1,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1))
qqline
qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),ylim=c(0,30));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),xlim=c(-5,5));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),xlim=c(-5,5),ylim=c(-50,50));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),xlim=c(-5,5),ylim=c(-5,20));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),xlim=c(-2,2),ylim=c(-5,20));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1),xlim=c(-5,5),ylim=c(-5,20));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1),color="red")
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1),col="red")
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1))
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1),col="red")
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1),col="red",main="Student distribution vs Normal distribution")
title(main="Student distribution vs Normal distribution")
qqnorm(qt(seq(0.01,0.99,0.01),df=1));qqline(qt(seq(0.01,0.99,0.01),df=1),col="red",main="Student distribution vs Normal distribution")
qqnorm(qt(seq(0.01,0.99,0.01),df=100));qqline(qt(seq(0.01,0.99,0.01),df=100),col="red")
qnorm(0.975)
qnorm(0.5)
qnorm(1)
?qt
qt(0.975,8)
1.96*sqrt(75/1000*(1-75/1000)/1000)
0.075+1.96*sqrt(75/1000*(1-75/1000)/1000)
0.075-1.96*sqrt(75/1000*(1-75/1000)/1000)
?length
?size
nchar("Hello friend")
nchar("Hello")
nchar("Hello ")
length("Hello")
read.table("Aargau_2015.csv",header=TRUE,sep=",")
x=read.table("Aargau_2015.csv",header=TRUE,sep=",")
length(x[,"municipality"])
length(x)
length(x[,1])
length(x[[1]])
x[[1]]
length(x data$municipality)
aargau data=read.table("Aargau_2015.csv",header=TRUE,sep=",")
aargau data<-read.table("Aargau_2015.csv",header=TRUE,sep=",")
aargau$data=read.table("Aargau_2015.csv",header=TRUE,sep=",")
[aargau,data]=read.table("Aargau_2015.csv",header=TRUE,sep=",")
length(x$municipality)
mean(x[,1])
ave(x)
ave(t(x))
ave(1:3)
ave(x[,1])
sum(x[,1]-ave(x[,1]))^2
sum(x[,1]-ave(x[,1]))
x[,1]-ave(x[,1])
sum((x[,1]-ave(x[,1]))^2)
sqrt(sum((x[,1]-ave(x[,1]))^2))
var(x[,1])
sqrt(sum((x[,1]-ave(x[,1]))^2)/213)
sqrt(var(x[,1]))
mean(x[,1])
mean(x[,1],trim=0.01)
mean(x[,1],trim=0.001)
mean(x[,1],trim=0.01)
mean(x[,1],trim=0.05)
mean(x[,1],trim=0.5)
mean(x[,1],trim=0.001)
mean(x[,1],trim=0.005)
aargau_data=x
set.seed(42)
aargau_sample <- sample(x = aargau_data$population, size = 10, replace = TRUE)
aargau_sample <- sort(aargau_sample)
View(aargau_sample)
aargau_sample==aargau_sample
unique(aargau_sample)
match(1925,aargau_sample)
duplicated(aargau_sample)
aargau_sample(duplicated(aargau_sample))
aargau_sample[duplicated(aargau_sample)]
mean(aargau_sample)
